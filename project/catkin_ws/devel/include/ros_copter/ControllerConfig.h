//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the ros_copter package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __ros_copter__CONTROLLERCONFIG_H__
#define __ros_copter__CONTROLLERCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace ros_copter
{
  class ControllerConfigStatics;
  
  class ControllerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(ControllerConfig &config, const ControllerConfig &max, const ControllerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const ControllerConfig &config1, const ControllerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, ControllerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const ControllerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, ControllerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const ControllerConfig &config) const = 0;
      virtual void getValue(const ControllerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T ControllerConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (ControllerConfig::* field);

      virtual void clamp(ControllerConfig &config, const ControllerConfig &max, const ControllerConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const ControllerConfig &config1, const ControllerConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, ControllerConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const ControllerConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, ControllerConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const ControllerConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const ControllerConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, ControllerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string name, std::string type, int parent, int id, bool s, T PT::* f) : AbstractGroupDescription(name, type, parent, id, s), field(f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, ControllerConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("tau"==(*_i)->name){tau = boost::any_cast<double>(val);}
        if("equilbrium_thrust"==(*_i)->name){equilbrium_thrust = boost::any_cast<double>(val);}
      }
    }

    double tau;
double equilbrium_thrust;

    bool state;
    std::string name;

    class VELOCITY
{
  public:
    VELOCITY()
    {
      state = true;
      name = "Velocity";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("u_P"==(*_i)->name){u_P = boost::any_cast<double>(val);}
        if("u_I"==(*_i)->name){u_I = boost::any_cast<double>(val);}
        if("u_D"==(*_i)->name){u_D = boost::any_cast<double>(val);}
        if("v_P"==(*_i)->name){v_P = boost::any_cast<double>(val);}
        if("v_I"==(*_i)->name){v_I = boost::any_cast<double>(val);}
        if("v_D"==(*_i)->name){v_D = boost::any_cast<double>(val);}
        if("w_P"==(*_i)->name){w_P = boost::any_cast<double>(val);}
        if("w_I"==(*_i)->name){w_I = boost::any_cast<double>(val);}
        if("w_D"==(*_i)->name){w_D = boost::any_cast<double>(val);}
      }
    }

    double u_P;
double u_I;
double u_D;
double v_P;
double v_I;
double v_D;
double w_P;
double w_I;
double w_D;

    bool state;
    std::string name;

    
}velocity;

class POSITION
{
  public:
    POSITION()
    {
      state = true;
      name = "Position";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("x_P"==(*_i)->name){x_P = boost::any_cast<double>(val);}
        if("x_I"==(*_i)->name){x_I = boost::any_cast<double>(val);}
        if("x_D"==(*_i)->name){x_D = boost::any_cast<double>(val);}
        if("y_P"==(*_i)->name){y_P = boost::any_cast<double>(val);}
        if("y_I"==(*_i)->name){y_I = boost::any_cast<double>(val);}
        if("y_D"==(*_i)->name){y_D = boost::any_cast<double>(val);}
        if("z_P"==(*_i)->name){z_P = boost::any_cast<double>(val);}
        if("z_I"==(*_i)->name){z_I = boost::any_cast<double>(val);}
        if("z_D"==(*_i)->name){z_D = boost::any_cast<double>(val);}
      }
    }

    double x_P;
double x_I;
double x_D;
double y_P;
double y_I;
double y_D;
double z_P;
double z_I;
double z_D;

    bool state;
    std::string name;

    
}position;

class ANGLE
{
  public:
    ANGLE()
    {
      state = true;
      name = "Angle";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("psi_P"==(*_i)->name){psi_P = boost::any_cast<double>(val);}
        if("psi_I"==(*_i)->name){psi_I = boost::any_cast<double>(val);}
        if("psi_D"==(*_i)->name){psi_D = boost::any_cast<double>(val);}
      }
    }

    double psi_P;
double psi_I;
double psi_D;

    bool state;
    std::string name;

    
}angle;

class LIMITS
{
  public:
    LIMITS()
    {
      state = true;
      name = "Limits";
    }

    void setParams(ControllerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_roll"==(*_i)->name){max_roll = boost::any_cast<double>(val);}
        if("max_pitch"==(*_i)->name){max_pitch = boost::any_cast<double>(val);}
        if("max_yaw_rate"==(*_i)->name){max_yaw_rate = boost::any_cast<double>(val);}
        if("max_throttle"==(*_i)->name){max_throttle = boost::any_cast<double>(val);}
        if("max_u"==(*_i)->name){max_u = boost::any_cast<double>(val);}
        if("max_v"==(*_i)->name){max_v = boost::any_cast<double>(val);}
        if("max_w"==(*_i)->name){max_w = boost::any_cast<double>(val);}
      }
    }

    double max_roll;
double max_pitch;
double max_yaw_rate;
double max_throttle;
double max_u;
double max_v;
double max_w;

    bool state;
    std::string name;

    
}limits;

}groups;



//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double tau;
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double equilbrium_thrust;
//#line 13 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double u_P;
//#line 14 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double u_I;
//#line 15 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double u_D;
//#line 17 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double v_P;
//#line 18 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double v_I;
//#line 19 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double v_D;
//#line 21 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double w_P;
//#line 22 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double w_I;
//#line 23 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double w_D;
//#line 26 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double x_P;
//#line 27 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double x_I;
//#line 28 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double x_D;
//#line 30 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double y_P;
//#line 31 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double y_I;
//#line 32 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double y_D;
//#line 34 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double z_P;
//#line 35 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double z_I;
//#line 36 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double z_D;
//#line 39 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double psi_P;
//#line 40 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double psi_I;
//#line 41 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double psi_D;
//#line 44 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double max_roll;
//#line 45 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double max_pitch;
//#line 46 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double max_yaw_rate;
//#line 47 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double max_throttle;
//#line 48 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double max_u;
//#line 49 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double max_v;
//#line 50 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      double max_w;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("ControllerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const ControllerConfig &__max__ = __getMax__();
      const ControllerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const ControllerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const ControllerConfig &__getDefault__();
    static const ControllerConfig &__getMax__();
    static const ControllerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const ControllerConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void ControllerConfig::ParamDescription<std::string>::clamp(ControllerConfig &config, const ControllerConfig &max, const ControllerConfig &min) const
  {
    return;
  }

  class ControllerConfigStatics
  {
    friend class ControllerConfig;
    
    ControllerConfigStatics()
    {
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT, ControllerConfig> Default("Default", "", 0, 0, true, &ControllerConfig::groups);
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.tau = 0.0;
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.tau = 1.0;
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.tau = 0.0;
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("tau", "double", 0, "Dirty Derivative Filter Constant", "", &ControllerConfig::tau)));
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("tau", "double", 0, "Dirty Derivative Filter Constant", "", &ControllerConfig::tau)));
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.equilbrium_thrust = 0.0;
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.equilbrium_thrust = 1.0;
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.equilbrium_thrust = 0.0;
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("equilbrium_thrust", "double", 0, "Equilibrium Thrust (normalized)", "", &ControllerConfig::equilbrium_thrust)));
//#line 280 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("equilbrium_thrust", "double", 0, "Equilibrium Thrust (normalized)", "", &ControllerConfig::equilbrium_thrust)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::VELOCITY, ControllerConfig::DEFAULT> Velocity("Velocity", "", 0, 1, true, &ControllerConfig::DEFAULT::velocity);
//#line 13 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.u_P = 0.0;
//#line 13 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.u_P = 5.0;
//#line 13 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.u_P = 0.0;
//#line 13 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("u_P", "double", 0, "Forward Velocity Proportional gain", "", &ControllerConfig::u_P)));
//#line 13 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("u_P", "double", 0, "Forward Velocity Proportional gain", "", &ControllerConfig::u_P)));
//#line 14 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.u_I = 0.0;
//#line 14 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.u_I = 5.0;
//#line 14 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.u_I = 0.0;
//#line 14 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("u_I", "double", 0, "Forward Velocity Integral gain", "", &ControllerConfig::u_I)));
//#line 14 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("u_I", "double", 0, "Forward Velocity Integral gain", "", &ControllerConfig::u_I)));
//#line 15 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.u_D = 0.0;
//#line 15 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.u_D = 5.0;
//#line 15 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.u_D = 0.1;
//#line 15 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("u_D", "double", 0, "Forward Velocity Derivative gain", "", &ControllerConfig::u_D)));
//#line 15 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("u_D", "double", 0, "Forward Velocity Derivative gain", "", &ControllerConfig::u_D)));
//#line 17 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.v_P = 0.0;
//#line 17 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.v_P = 5.0;
//#line 17 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.v_P = 0.0;
//#line 17 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("v_P", "double", 0, "Right Velocity Proportional gain", "", &ControllerConfig::v_P)));
//#line 17 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("v_P", "double", 0, "Right Velocity Proportional gain", "", &ControllerConfig::v_P)));
//#line 18 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.v_I = 0.0;
//#line 18 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.v_I = 5.0;
//#line 18 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.v_I = 0.0;
//#line 18 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("v_I", "double", 0, "Right Velocity Integral gain", "", &ControllerConfig::v_I)));
//#line 18 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("v_I", "double", 0, "Right Velocity Integral gain", "", &ControllerConfig::v_I)));
//#line 19 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.v_D = 0.0;
//#line 19 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.v_D = 5.0;
//#line 19 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.v_D = 0.0;
//#line 19 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("v_D", "double", 0, "Right Velocity Derivative gain", "", &ControllerConfig::v_D)));
//#line 19 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("v_D", "double", 0, "Right Velocity Derivative gain", "", &ControllerConfig::v_D)));
//#line 21 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.w_P = 0.0;
//#line 21 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.w_P = 5.0;
//#line 21 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.w_P = 0.0;
//#line 21 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("w_P", "double", 0, "Down Velocity Proportional gain", "", &ControllerConfig::w_P)));
//#line 21 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("w_P", "double", 0, "Down Velocity Proportional gain", "", &ControllerConfig::w_P)));
//#line 22 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.w_I = 0.0;
//#line 22 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.w_I = 5.0;
//#line 22 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.w_I = 0.0;
//#line 22 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("w_I", "double", 0, "Down Velocity Integral gain", "", &ControllerConfig::w_I)));
//#line 22 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("w_I", "double", 0, "Down Velocity Integral gain", "", &ControllerConfig::w_I)));
//#line 23 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.w_D = 0.0;
//#line 23 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.w_D = 5.0;
//#line 23 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.w_D = 0.0;
//#line 23 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Velocity.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("w_D", "double", 0, "Down Velocity Derivative gain", "", &ControllerConfig::w_D)));
//#line 23 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("w_D", "double", 0, "Down Velocity Derivative gain", "", &ControllerConfig::w_D)));
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Velocity.convertParams();
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::VELOCITY, ControllerConfig::DEFAULT>(Velocity)));
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::VELOCITY, ControllerConfig::DEFAULT>(Velocity)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::POSITION, ControllerConfig::DEFAULT> Position("Position", "", 0, 2, true, &ControllerConfig::DEFAULT::position);
//#line 26 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.x_P = 0.0;
//#line 26 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.x_P = 5.0;
//#line 26 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.x_P = 0.0;
//#line 26 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_P", "double", 0, "North Position Proportional gain", "", &ControllerConfig::x_P)));
//#line 26 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_P", "double", 0, "North Position Proportional gain", "", &ControllerConfig::x_P)));
//#line 27 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.x_I = 0.0;
//#line 27 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.x_I = 5.0;
//#line 27 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.x_I = 0.0;
//#line 27 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_I", "double", 0, "North Position Integral gain", "", &ControllerConfig::x_I)));
//#line 27 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_I", "double", 0, "North Position Integral gain", "", &ControllerConfig::x_I)));
//#line 28 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.x_D = 0.0;
//#line 28 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.x_D = 5.0;
//#line 28 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.x_D = 0.0;
//#line 28 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_D", "double", 0, "North Position Derivative gain", "", &ControllerConfig::x_D)));
//#line 28 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("x_D", "double", 0, "North Position Derivative gain", "", &ControllerConfig::x_D)));
//#line 30 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.y_P = 0.0;
//#line 30 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.y_P = 5.0;
//#line 30 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.y_P = 0.0;
//#line 30 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_P", "double", 0, "East Position Proportional gain", "", &ControllerConfig::y_P)));
//#line 30 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_P", "double", 0, "East Position Proportional gain", "", &ControllerConfig::y_P)));
//#line 31 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.y_I = 0.0;
//#line 31 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.y_I = 5.0;
//#line 31 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.y_I = 0.0;
//#line 31 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_I", "double", 0, "East Position Integral gain", "", &ControllerConfig::y_I)));
//#line 31 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_I", "double", 0, "East Position Integral gain", "", &ControllerConfig::y_I)));
//#line 32 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.y_D = 0.0;
//#line 32 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.y_D = 5.0;
//#line 32 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.y_D = 0.0;
//#line 32 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_D", "double", 0, "East Position Derivative gain", "", &ControllerConfig::y_D)));
//#line 32 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("y_D", "double", 0, "East Position Derivative gain", "", &ControllerConfig::y_D)));
//#line 34 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.z_P = 0.0;
//#line 34 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.z_P = 5.0;
//#line 34 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.z_P = 0.0;
//#line 34 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_P", "double", 0, "Altitude Proportional gain", "", &ControllerConfig::z_P)));
//#line 34 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_P", "double", 0, "Altitude Proportional gain", "", &ControllerConfig::z_P)));
//#line 35 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.z_I = 0.0;
//#line 35 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.z_I = 5.0;
//#line 35 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.z_I = 0.0;
//#line 35 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_I", "double", 0, "Altitude Integral gain", "", &ControllerConfig::z_I)));
//#line 35 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_I", "double", 0, "Altitude Integral gain", "", &ControllerConfig::z_I)));
//#line 36 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.z_D = 0.0;
//#line 36 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.z_D = 5.0;
//#line 36 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.z_D = 0.0;
//#line 36 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Position.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_D", "double", 0, "Altitude Derivative gain", "", &ControllerConfig::z_D)));
//#line 36 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("z_D", "double", 0, "Altitude Derivative gain", "", &ControllerConfig::z_D)));
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Position.convertParams();
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::POSITION, ControllerConfig::DEFAULT>(Position)));
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::POSITION, ControllerConfig::DEFAULT>(Position)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ANGLE, ControllerConfig::DEFAULT> Angle("Angle", "", 0, 3, true, &ControllerConfig::DEFAULT::angle);
//#line 39 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.psi_P = 0.0;
//#line 39 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.psi_P = 25.0;
//#line 39 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.psi_P = 0.0;
//#line 39 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Angle.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_P", "double", 0, "Yaw Angle Proportional gain", "", &ControllerConfig::psi_P)));
//#line 39 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_P", "double", 0, "Yaw Angle Proportional gain", "", &ControllerConfig::psi_P)));
//#line 40 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.psi_I = 0.0;
//#line 40 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.psi_I = 25.0;
//#line 40 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.psi_I = 0.0;
//#line 40 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Angle.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_I", "double", 0, "Yaw Angle Integral gain", "", &ControllerConfig::psi_I)));
//#line 40 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_I", "double", 0, "Yaw Angle Integral gain", "", &ControllerConfig::psi_I)));
//#line 41 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.psi_D = 0.0;
//#line 41 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.psi_D = 25.0;
//#line 41 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.psi_D = 0.0;
//#line 41 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Angle.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_D", "double", 0, "Yaw Angle Derivative gain", "", &ControllerConfig::psi_D)));
//#line 41 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("psi_D", "double", 0, "Yaw Angle Derivative gain", "", &ControllerConfig::psi_D)));
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Angle.convertParams();
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ANGLE, ControllerConfig::DEFAULT>(Angle)));
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::ANGLE, ControllerConfig::DEFAULT>(Angle)));
ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::LIMITS, ControllerConfig::DEFAULT> Limits("Limits", "", 0, 4, true, &ControllerConfig::DEFAULT::limits);
//#line 44 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.max_roll = 0.0;
//#line 44 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.max_roll = 1.5619;
//#line 44 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.max_roll = 0.0;
//#line 44 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_roll", "double", 0, "Maximum Roll Commanded by Controller (rad)", "", &ControllerConfig::max_roll)));
//#line 44 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_roll", "double", 0, "Maximum Roll Commanded by Controller (rad)", "", &ControllerConfig::max_roll)));
//#line 45 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.max_pitch = 0.0;
//#line 45 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.max_pitch = 1.5619;
//#line 45 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.max_pitch = 0.0;
//#line 45 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_pitch", "double", 0, "Maximum Pitch Commanded by Controller (rad)", "", &ControllerConfig::max_pitch)));
//#line 45 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_pitch", "double", 0, "Maximum Pitch Commanded by Controller (rad)", "", &ControllerConfig::max_pitch)));
//#line 46 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.max_yaw_rate = 0.0;
//#line 46 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.max_yaw_rate = 6.825;
//#line 46 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.max_yaw_rate = 0.0;
//#line 46 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_yaw_rate", "double", 0, "Maximum Yaw Rate Commanded by Controller (rad/s)", "", &ControllerConfig::max_yaw_rate)));
//#line 46 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_yaw_rate", "double", 0, "Maximum Yaw Rate Commanded by Controller (rad/s)", "", &ControllerConfig::max_yaw_rate)));
//#line 47 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.max_throttle = 0.0;
//#line 47 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.max_throttle = 1.0;
//#line 47 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.max_throttle = 0.0;
//#line 47 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_throttle", "double", 0, "Maximum Throttle Commanded by Controller (normalized)", "", &ControllerConfig::max_throttle)));
//#line 47 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_throttle", "double", 0, "Maximum Throttle Commanded by Controller (normalized)", "", &ControllerConfig::max_throttle)));
//#line 48 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.max_u = 0.0;
//#line 48 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.max_u = 45.0;
//#line 48 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.max_u = 0.0;
//#line 48 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_u", "double", 0, "Maximum Forward Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_u)));
//#line 48 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_u", "double", 0, "Maximum Forward Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_u)));
//#line 49 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.max_v = 0.0;
//#line 49 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.max_v = 45.0;
//#line 49 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.max_v = 0.0;
//#line 49 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_v", "double", 0, "Maximum Right Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_v)));
//#line 49 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_v", "double", 0, "Maximum Right Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_v)));
//#line 50 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __min__.max_w = 0.0;
//#line 50 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __max__.max_w = 45.0;
//#line 50 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __default__.max_w = 0.0;
//#line 50 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      Limits.abstract_parameters.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_w", "double", 0, "Maximum Right Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_w)));
//#line 50 "/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/ros_copter/cfg/Controller.cfg"
      __param_descriptions__.push_back(ControllerConfig::AbstractParamDescriptionConstPtr(new ControllerConfig::ParamDescription<double>("max_w", "double", 0, "Maximum Right Velocity Commanded by Controller (m/s)", "", &ControllerConfig::max_w)));
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Limits.convertParams();
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::LIMITS, ControllerConfig::DEFAULT>(Limits)));
//#line 109 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT::LIMITS, ControllerConfig::DEFAULT>(Limits)));
//#line 235 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 235 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(ControllerConfig::AbstractGroupDescriptionConstPtr(new ControllerConfig::GroupDescription<ControllerConfig::DEFAULT, ControllerConfig>(Default)));
//#line 353 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<ControllerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    ControllerConfig __max__;
    ControllerConfig __min__;
    ControllerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const ControllerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static ControllerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &ControllerConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const ControllerConfig &ControllerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const ControllerConfig &ControllerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const ControllerConfig &ControllerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<ControllerConfig::AbstractParamDescriptionConstPtr> &ControllerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<ControllerConfig::AbstractGroupDescriptionConstPtr> &ControllerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const ControllerConfigStatics *ControllerConfig::__get_statics__()
  {
    const static ControllerConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = ControllerConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __CONTROLLERRECONFIGURATOR_H__
