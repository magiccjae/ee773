// Generated by gencpp from file diff_flat/y_traj.msg
// DO NOT EDIT!


#ifndef DIFF_FLAT_MESSAGE_Y_TRAJ_H
#define DIFF_FLAT_MESSAGE_Y_TRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diff_flat
{
template <class ContainerAllocator>
struct y_traj_
{
  typedef y_traj_<ContainerAllocator> Type;

  y_traj_()
    : pn(0.0)
    , pe(0.0)
    , pd(0.0)
    , psi(0.0)
    , pn_dot(0.0)
    , pe_dot(0.0)
    , pd_dot(0.0)
    , psi_dot(0.0)
    , pn_ddot(0.0)
    , pe_ddot(0.0)
    , pd_ddot(0.0)
    , psi_ddot(0.0)  {
    }
  y_traj_(const ContainerAllocator& _alloc)
    : pn(0.0)
    , pe(0.0)
    , pd(0.0)
    , psi(0.0)
    , pn_dot(0.0)
    , pe_dot(0.0)
    , pd_dot(0.0)
    , psi_dot(0.0)
    , pn_ddot(0.0)
    , pe_ddot(0.0)
    , pd_ddot(0.0)
    , psi_ddot(0.0)  {
  (void)_alloc;
    }



   typedef double _pn_type;
  _pn_type pn;

   typedef double _pe_type;
  _pe_type pe;

   typedef double _pd_type;
  _pd_type pd;

   typedef double _psi_type;
  _psi_type psi;

   typedef double _pn_dot_type;
  _pn_dot_type pn_dot;

   typedef double _pe_dot_type;
  _pe_dot_type pe_dot;

   typedef double _pd_dot_type;
  _pd_dot_type pd_dot;

   typedef double _psi_dot_type;
  _psi_dot_type psi_dot;

   typedef double _pn_ddot_type;
  _pn_ddot_type pn_ddot;

   typedef double _pe_ddot_type;
  _pe_ddot_type pe_ddot;

   typedef double _pd_ddot_type;
  _pd_ddot_type pd_ddot;

   typedef double _psi_ddot_type;
  _psi_ddot_type psi_ddot;




  typedef boost::shared_ptr< ::diff_flat::y_traj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diff_flat::y_traj_<ContainerAllocator> const> ConstPtr;

}; // struct y_traj_

typedef ::diff_flat::y_traj_<std::allocator<void> > y_traj;

typedef boost::shared_ptr< ::diff_flat::y_traj > y_trajPtr;
typedef boost::shared_ptr< ::diff_flat::y_traj const> y_trajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diff_flat::y_traj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diff_flat::y_traj_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace diff_flat

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'diff_flat': ['/home/magiccjae/jae_stuff/classes/ee773/project/catkin_ws/src/diff_flat/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::diff_flat::y_traj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diff_flat::y_traj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diff_flat::y_traj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diff_flat::y_traj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diff_flat::y_traj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diff_flat::y_traj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diff_flat::y_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4e248087d14e75e385030970108f437";
  }

  static const char* value(const ::diff_flat::y_traj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4e248087d14e75eULL;
  static const uint64_t static_value2 = 0x385030970108f437ULL;
};

template<class ContainerAllocator>
struct DataType< ::diff_flat::y_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diff_flat/y_traj";
  }

  static const char* value(const ::diff_flat::y_traj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diff_flat::y_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 pn\n\
float64 pe\n\
float64 pd\n\
float64 psi\n\
float64 pn_dot\n\
float64 pe_dot\n\
float64 pd_dot\n\
float64 psi_dot\n\
float64 pn_ddot\n\
float64 pe_ddot\n\
float64 pd_ddot\n\
float64 psi_ddot\n\
";
  }

  static const char* value(const ::diff_flat::y_traj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diff_flat::y_traj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pn);
      stream.next(m.pe);
      stream.next(m.pd);
      stream.next(m.psi);
      stream.next(m.pn_dot);
      stream.next(m.pe_dot);
      stream.next(m.pd_dot);
      stream.next(m.psi_dot);
      stream.next(m.pn_ddot);
      stream.next(m.pe_ddot);
      stream.next(m.pd_ddot);
      stream.next(m.psi_ddot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct y_traj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diff_flat::y_traj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diff_flat::y_traj_<ContainerAllocator>& v)
  {
    s << indent << "pn: ";
    Printer<double>::stream(s, indent + "  ", v.pn);
    s << indent << "pe: ";
    Printer<double>::stream(s, indent + "  ", v.pe);
    s << indent << "pd: ";
    Printer<double>::stream(s, indent + "  ", v.pd);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
    s << indent << "pn_dot: ";
    Printer<double>::stream(s, indent + "  ", v.pn_dot);
    s << indent << "pe_dot: ";
    Printer<double>::stream(s, indent + "  ", v.pe_dot);
    s << indent << "pd_dot: ";
    Printer<double>::stream(s, indent + "  ", v.pd_dot);
    s << indent << "psi_dot: ";
    Printer<double>::stream(s, indent + "  ", v.psi_dot);
    s << indent << "pn_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.pn_ddot);
    s << indent << "pe_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.pe_ddot);
    s << indent << "pd_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.pd_ddot);
    s << indent << "psi_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.psi_ddot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFF_FLAT_MESSAGE_Y_TRAJ_H
